{"ast":null,"code":"var _jsxFileName = \"D:\\\\Uni\\\\office\\\\project\\\\frontend\\\\src\\\\chatbot\\\\SymptomsDropdown.js\",\n  _s = $RefreshSig$();\n// components/SymptomsDropdown.js\n/*import React, {useEffect} from 'react';\r\nimport './dropdown.css'\r\n\r\nconst SymptomsDropdown = ({ symptoms, actionProvider }) => {\r\n  //const symptoms = [\"Fatigue\", \"Fever\", \"Loss of Appetite\", \"Coughing\", \"Sneezing\"];\r\n  useEffect(() => {\r\n    console.log(\"Symptoms received in dropdown:\", symptoms);\r\n  });\r\n  const handleChange = (event) => {\r\n    const selectedSymptom = event.target.value;\r\n    \r\n    actionProvider.handleSelectedSymptom(selectedSymptom);\r\n  };\r\n\r\n  return (\r\n    <select onChange={handleChange} className='dropdown' >\r\n      <option value=\"\">Select a symptom</option>\r\n      {symptoms && symptoms.map((symptom, index) => (\r\n        <option key={index} value={symptom}>{symptom}</option>\r\n      ))}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SymptomsDropdown;*/\n/*import React from 'react';\r\n\r\nconst SymptomsDropdown = ({ actionProvider, options }) => {\r\n  const handleDropdownChange = (event) => {\r\n    const selectedSymptom = event.target.value;\r\n    // You can call an actionProvider method to handle the selected symptom\r\n    actionProvider.handleSelectedSymptom(selectedSymptom);\r\n  };\r\n\r\n  return (\r\n    <select onChange={handleDropdownChange} defaultValue=\"\">\r\n      <option value=\"\" disabled>Select your symptom</option>\r\n      {options.map(option => (\r\n        <option key={option.value} value={option.value}>\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SymptomsDropdown;*/\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SymptomsDropdown({\n  options,\n  onSymptomSelected\n}) {\n  _s();\n  const [selectedSymptom, setSelectedSymptom] = useState('');\n  const handleChange = event => {\n    setSelectedSymptom(event.target.value);\n    onSymptomSelected(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    value: selectedSymptom,\n    onChange: handleChange,\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"\",\n      children: \"-- Please choose a symptom --\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: option,\n      children: option\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(SymptomsDropdown, \"hAKCtdamhIsUhafBN8oMGPB8B8M=\");\n_c = SymptomsDropdown;\nvar _c;\n$RefreshReg$(_c, \"SymptomsDropdown\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SymptomsDropdown","options","onSymptomSelected","_s","selectedSymptom","setSelectedSymptom","handleChange","event","target","value","onChange","children","fileName","_jsxFileName","lineNumber","columnNumber","map","option","index","_c","$RefreshReg$"],"sources":["D:/Uni/office/project/frontend/src/chatbot/SymptomsDropdown.js"],"sourcesContent":["// components/SymptomsDropdown.js\r\n/*import React, {useEffect} from 'react';\r\nimport './dropdown.css'\r\n\r\nconst SymptomsDropdown = ({ symptoms, actionProvider }) => {\r\n  //const symptoms = [\"Fatigue\", \"Fever\", \"Loss of Appetite\", \"Coughing\", \"Sneezing\"];\r\n  useEffect(() => {\r\n    console.log(\"Symptoms received in dropdown:\", symptoms);\r\n  });\r\n  const handleChange = (event) => {\r\n    const selectedSymptom = event.target.value;\r\n    \r\n    actionProvider.handleSelectedSymptom(selectedSymptom);\r\n  };\r\n\r\n  return (\r\n    <select onChange={handleChange} className='dropdown' >\r\n      <option value=\"\">Select a symptom</option>\r\n      {symptoms && symptoms.map((symptom, index) => (\r\n        <option key={index} value={symptom}>{symptom}</option>\r\n      ))}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SymptomsDropdown;*/\r\n/*import React from 'react';\r\n\r\nconst SymptomsDropdown = ({ actionProvider, options }) => {\r\n  const handleDropdownChange = (event) => {\r\n    const selectedSymptom = event.target.value;\r\n    // You can call an actionProvider method to handle the selected symptom\r\n    actionProvider.handleSelectedSymptom(selectedSymptom);\r\n  };\r\n\r\n  return (\r\n    <select onChange={handleDropdownChange} defaultValue=\"\">\r\n      <option value=\"\" disabled>Select your symptom</option>\r\n      {options.map(option => (\r\n        <option key={option.value} value={option.value}>\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SymptomsDropdown;*/\r\nimport React, { useState } from 'react';\r\n\r\nfunction SymptomsDropdown({ options, onSymptomSelected }) {\r\n    const [selectedSymptom, setSelectedSymptom] = useState('');\r\n\r\n    const handleChange = (event) => {\r\n        setSelectedSymptom(event.target.value);\r\n        onSymptomSelected(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <select value={selectedSymptom} onChange={handleChange}>\r\n            <option value=\"\">-- Please choose a symptom --</option>\r\n            {options.map((option, index) => (\r\n                <option key={index} value={option}>\r\n                    {option}\r\n                </option>\r\n            ))}\r\n        </select>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,gBAAgBA,CAAC;EAAEC,OAAO;EAAEC;AAAkB,CAAC,EAAE;EAAAC,EAAA;EACtD,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMS,YAAY,GAAIC,KAAK,IAAK;IAC5BF,kBAAkB,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACtCP,iBAAiB,CAACK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACzC,CAAC;EAED,oBACIV,OAAA;IAAQU,KAAK,EAAEL,eAAgB;IAACM,QAAQ,EAAEJ,YAAa;IAAAK,QAAA,gBACnDZ,OAAA;MAAQU,KAAK,EAAC,EAAE;MAAAE,QAAA,EAAC;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACtDd,OAAO,CAACe,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACvBnB,OAAA;MAAoBU,KAAK,EAAEQ,MAAO;MAAAN,QAAA,EAC7BM;IAAM,GADEC,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACX,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEjB;AAACZ,EAAA,CAlBQH,gBAAgB;AAAAmB,EAAA,GAAhBnB,gBAAgB;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}