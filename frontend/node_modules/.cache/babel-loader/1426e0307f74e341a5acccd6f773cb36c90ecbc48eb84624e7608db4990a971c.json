{"ast":null,"code":"/*const MessageParser = ({ children, actions }) => {\r\n  const parse = (message) => {\r\n    console.log(message);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {React.Children.map(children, (child) => {\r\n        return React.cloneElement(child, {\r\n          parse: parse,\r\n          actions: {},\r\n        });\r\n      })}\r\n    </div>\r\n  );\r\n};*/\n// MessageParser.js\nclass MessageParser {\n  constructor(actionProvider, state) {\n    this.parse = message => {\n      const {\n        nextInputAction\n      } = this.state; // Get current state of expected input\n\n      // Check if there's a specific next input action expected\n      if (nextInputAction) {\n        // Use the stored function reference from the state to handle the input\n        nextInputAction(message);\n      } else {\n        // Default to handling category if no specific input action is set\n        this.actionProvider.handleAnimalCategory(message);\n      }\n    };\n    this.actionProvider = actionProvider;\n    this.state = state;\n  }\n}\nexport default MessageParser;","map":{"version":3,"names":["MessageParser","constructor","actionProvider","state","parse","message","nextInputAction","handleAnimalCategory"],"sources":["D:/Uni/office/project/frontend/src/chatbot/MessageParser.js"],"sourcesContent":["\r\n\r\n/*const MessageParser = ({ children, actions }) => {\r\n  const parse = (message) => {\r\n    console.log(message);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {React.Children.map(children, (child) => {\r\n        return React.cloneElement(child, {\r\n          parse: parse,\r\n          actions: {},\r\n        });\r\n      })}\r\n    </div>\r\n  );\r\n};*/\r\n// MessageParser.js\r\nclass MessageParser {\r\n    constructor(actionProvider, state) {\r\n      this.actionProvider = actionProvider;\r\n      this.state = state;\r\n    }\r\n  \r\n    parse = (message) => {\r\n      const { nextInputAction } = this.state; // Get current state of expected input\r\n  \r\n      // Check if there's a specific next input action expected\r\n      if (nextInputAction) {\r\n        // Use the stored function reference from the state to handle the input\r\n        nextInputAction(message);\r\n      } else {\r\n        // Default to handling category if no specific input action is set\r\n        this.actionProvider.handleAnimalCategory(message);\r\n      }\r\n    }\r\n  }\r\n  \r\n  export default MessageParser;\r\n  "],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,aAAa,CAAC;EAChBC,WAAWA,CAACC,cAAc,EAAEC,KAAK,EAAE;IAAA,KAKnCC,KAAK,GAAIC,OAAO,IAAK;MACnB,MAAM;QAAEC;MAAgB,CAAC,GAAG,IAAI,CAACH,KAAK,CAAC,CAAC;;MAExC;MACA,IAAIG,eAAe,EAAE;QACnB;QACAA,eAAe,CAACD,OAAO,CAAC;MAC1B,CAAC,MAAM;QACL;QACA,IAAI,CAACH,cAAc,CAACK,oBAAoB,CAACF,OAAO,CAAC;MACnD;IACF,CAAC;IAfC,IAAI,CAACH,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,KAAK,GAAGA,KAAK;EACpB;AAcF;AAEA,eAAeH,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}