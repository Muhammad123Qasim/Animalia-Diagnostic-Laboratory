{"ast":null,"code":"var _jsxFileName = \"D:\\\\Uni\\\\office\\\\project\\\\frontend\\\\src\\\\chatbot\\\\ActionProvider.js\";\nimport SymptomsDropdown from \"./SymptomsDropdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.handleInvalidMessage = context => {\n      const defaultMsg = 'Incorrect input. Please try again.';\n      const messageText = context ? `Please enter a valid ${context}.` : defaultMsg;\n      const message = this.createChatBotMessage(messageText);\n      this.updateChatbotState(message);\n    };\n    this.greetUser = () => {\n      const greetingMessage = this.createChatBotMessage(\"Hello.\");\n      this.updateChatbotState(greetingMessage);\n    };\n    this.handleAnimalCategory = category => {\n      // Define valid categories\n      const validCategories = [\"pets\", \"livestock\", \"poultry\"];\n\n      // Check if the entered category is valid\n      if (validCategories.includes(category.toLowerCase())) {\n        if (category.toLowerCase() === \"pets\") {\n          const message = this.createChatBotMessage(\"Please enter your pet type (Dog, Cat, Parrot):\");\n          this.updateChatbotState(message);\n          this.setState(state => ({\n            ...state,\n            nextInputAction: this.handlePetType\n          }));\n        } else if (category.toLowerCase() === \"livestock\") {\n          const message = this.createChatBotMessage(\"Please enter your livestock type (Cow, Buffalo, Sheep, Goat):\");\n          this.updateChatbotState(message);\n          this.setState(state => ({\n            ...state,\n            nextInputAction: this.handleLiveStockType\n          }));\n        } else if (category.toLowerCase() === \"poultry\") {\n          const message = this.createChatBotMessage(\"Please enter your poultry type (Chicken):\");\n          this.updateChatbotState(message);\n          this.setState(state => ({\n            ...state,\n            nextInputAction: this.handlePoultryType\n          }));\n        }\n      } else {\n        const message = this.createChatBotMessage(\"Please enter a valid category (Pets, Livestock, or Poultry).\");\n        this.updateChatbotState(message);\n      }\n    };\n    this.handlePetType = petType => {\n      const validPets = [\"dog\", \"cat\", \"parrot\"];\n      if (validPets.includes(petType.toLowerCase())) {\n        this.handleSymptoms(petType);\n      } else {\n        this.handleInvalidMessage(\"pet (Dog, Cat, Parrot)\");\n      }\n    };\n    this.handleLiveStockType = livestocktype => {\n      const validLivestock = [\"cow\", \"buffalo\", \"sheep\", \"goat\"];\n      if (validLivestock.includes(livestocktype.toLowerCase())) {\n        this.handleSymptoms(livestocktype);\n      } else {\n        this.handleInvalidMessage(\"livestock (Cow, Buffalo, Sheep, Goat)\");\n      }\n    };\n    this.handlePoultryType = poultrytype => {\n      const validpoultry = [\"chicken\"];\n      if (validpoultry.includes(poultrytype.toLowerCase())) {\n        this.handleSymptoms(poultrytype);\n      } else {\n        this.handleInvalidMessage(\"poultry (Chicken)\");\n      }\n    };\n    this.handleSymptoms = animalType => {\n      /* const symptoms = this.symptomsByAnimalType[animalType.toLowerCase()];\r\n       console.log(\"Symptom before dropdown: \",symptoms);\r\n       // Create a dropdown message\r\n       const dropdownMessage = this.createChatBotMessage(\r\n         \"Select a symptom:\",\r\n         {\r\n           widget: \"SymptomsDropdown\",\r\n           options: symptoms.map(symptom => ({ value: symptom, label: symptom }))\r\n         }\r\n       );\r\n       this.updateChatbotState(dropdownMessage);*/\n      const symptoms = this.symptomsByAnimalType[animalType.toLowerCase()];\n      console.log(\"Symptom before dropdown: \", symptoms);\n      // Create a dropdown message\n      const dropdownMessage = this.createChatBotMessage(\"Select a symptom:\", {\n        widget: \"SymptomsDropdown\",\n        props: {\n          symptoms\n        } // Pass symptoms as a separate prop\n      });\n      this.updateChatbotState(dropdownMessage);\n    };\n    this.handleSelectedSymptom = symptom => {\n      const message = this.createChatBotMessage(`You have selected the following symptom: ${symptom}`);\n      this.updateChatbotState(message);\n    };\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    this.symptomsByAnimalType = {\n      dog: [\"Barking\", \"Lethargy\", \"Aggression\"],\n      cat: [\"Meowing\", \"Sleepiness\", \"Irritability\"],\n      parrot: [\"Screaming\", \"Feather Plucking\", \"Biting\"],\n      cow: [\"Limping\", \"Coughing\", \"Low Milk Production\"],\n      chicken: [\"Pecking\", \"Feather Loss\", \"Lameness\"]\n    };\n  }\n  /* updateChatbotState(message) {\r\n     this.setState(prevState => ({\r\n       ...prevState,\r\n       messages: [...prevState.messages, message]\r\n     }));\r\n   }*/\n  updateChatbotState(message) {\n    this.setState(prevState => ({\n      ...prevState,\n      messages: [...prevState.messages, message]\n    }));\n    if (message.widget === \"SymptomsDropdown\") {\n      const SymptomsDropdownComponent = () => /*#__PURE__*/_jsxDEV(SymptomsDropdown, {\n        symptoms: message.props.symptoms,\n        actionProvider: this\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this);\n      this.setState(prevState => ({\n        ...prevState,\n        messages: [...prevState.messages, SymptomsDropdownComponent]\n      }));\n    }\n  }\n}\nexport default ActionProvider;","map":{"version":3,"names":["SymptomsDropdown","jsxDEV","_jsxDEV","ActionProvider","constructor","createChatBotMessage","setStateFunc","handleInvalidMessage","context","defaultMsg","messageText","message","updateChatbotState","greetUser","greetingMessage","handleAnimalCategory","category","validCategories","includes","toLowerCase","setState","state","nextInputAction","handlePetType","handleLiveStockType","handlePoultryType","petType","validPets","handleSymptoms","livestocktype","validLivestock","poultrytype","validpoultry","animalType","symptoms","symptomsByAnimalType","console","log","dropdownMessage","widget","props","handleSelectedSymptom","symptom","dog","cat","parrot","cow","chicken","prevState","messages","SymptomsDropdownComponent","actionProvider","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/Uni/office/project/frontend/src/chatbot/ActionProvider.js"],"sourcesContent":["\r\nimport SymptomsDropdown from \"./SymptomsDropdown\";\r\nclass ActionProvider {\r\n    constructor(createChatBotMessage, setStateFunc) {\r\n      this.createChatBotMessage = createChatBotMessage;\r\n      this.setState = setStateFunc;\r\n    \r\n      this.symptomsByAnimalType = {\r\n        dog: [\"Barking\", \"Lethargy\", \"Aggression\"],\r\n        cat: [\"Meowing\", \"Sleepiness\", \"Irritability\"],\r\n        parrot: [\"Screaming\", \"Feather Plucking\", \"Biting\"],\r\n        cow: [\"Limping\", \"Coughing\", \"Low Milk Production\"],\r\n        chicken: [\"Pecking\", \"Feather Loss\", \"Lameness\"]\r\n      };\r\n    }\r\n    handleInvalidMessage = (context) => {\r\n        const defaultMsg = 'Incorrect input. Please try again.';\r\n        const messageText = context ? `Please enter a valid ${context}.` : defaultMsg;\r\n        const message = this.createChatBotMessage(messageText);\r\n        this.updateChatbotState(message);\r\n    }\r\n    \r\n    greetUser = () => {\r\n      const greetingMessage = this.createChatBotMessage(\"Hello.\");\r\n      this.updateChatbotState(greetingMessage);\r\n    }\r\n    handleAnimalCategory = (category) => {\r\n      // Define valid categories\r\n      const validCategories = [\"pets\", \"livestock\", \"poultry\"];\r\n  \r\n      // Check if the entered category is valid\r\n      if (validCategories.includes(category.toLowerCase())) {\r\n        if (category.toLowerCase() === \"pets\") {\r\n            const message = this.createChatBotMessage(\"Please enter your pet type (Dog, Cat, Parrot):\");\r\n            this.updateChatbotState(message);\r\n            this.setState(state => ({ ...state, nextInputAction: this.handlePetType }));\r\n          } else if(category.toLowerCase() === \"livestock\") {\r\n            \r\n            const message = this.createChatBotMessage(\"Please enter your livestock type (Cow, Buffalo, Sheep, Goat):\");\r\n            this.updateChatbotState(message);\r\n            this.setState(state => ({ ...state, nextInputAction: this.handleLiveStockType }));\r\n            \r\n          } else if(category.toLowerCase() === \"poultry\") {\r\n            const message = this.createChatBotMessage(\"Please enter your poultry type (Chicken):\");\r\n            this.updateChatbotState(message);\r\n            this.setState(state => ({ ...state, nextInputAction: this.handlePoultryType }));\r\n          }\r\n        } else {\r\n          const message = this.createChatBotMessage(\"Please enter a valid category (Pets, Livestock, or Poultry).\");\r\n          this.updateChatbotState(message);\r\n        }\r\n    };\r\n  \r\n    \r\n\r\n    handlePetType = (petType) => {\r\n        const validPets = [\"dog\", \"cat\", \"parrot\"];\r\n        if (validPets.includes(petType.toLowerCase())) {\r\n          this.handleSymptoms(petType);\r\n        } else {\r\n          \r\n          this.handleInvalidMessage(\"pet (Dog, Cat, Parrot)\");\r\n        }\r\n      };\r\n    handleLiveStockType = (livestocktype) => {\r\n        const validLivestock = [\"cow\", \"buffalo\", \"sheep\", \"goat\"];\r\n        if (validLivestock.includes(livestocktype.toLowerCase())) {\r\n          this.handleSymptoms(livestocktype);\r\n        } else {\r\n         \r\n          this.handleInvalidMessage(\"livestock (Cow, Buffalo, Sheep, Goat)\");\r\n        }\r\n    }\r\n    handlePoultryType = (poultrytype) => {\r\n        const validpoultry =[\"chicken\"];\r\n        if (validpoultry.includes(poultrytype.toLowerCase())) {\r\n            this.handleSymptoms(poultrytype);\r\n          } else {\r\n           \r\n            this.handleInvalidMessage(\"poultry (Chicken)\");\r\n          }\r\n    }\r\n\r\n   /* updateChatbotState(message) {\r\n      this.setState(prevState => ({\r\n        ...prevState,\r\n        messages: [...prevState.messages, message]\r\n      }));\r\n    }*/\r\n      updateChatbotState(message) {\r\n        this.setState(prevState => ({\r\n          ...prevState,\r\n          messages: [...prevState.messages, message]\r\n        }));\r\n        if (message.widget === \"SymptomsDropdown\") {\r\n          const SymptomsDropdownComponent = () => (\r\n            <SymptomsDropdown\r\n              symptoms={message.props.symptoms}\r\n              actionProvider={this}\r\n            />\r\n          );\r\n          this.setState(prevState => ({\r\n            ...prevState,\r\n            messages: [...prevState.messages, SymptomsDropdownComponent]\r\n          }));\r\n        }\r\n      }\r\n\r\n    handleSymptoms = (animalType) => {\r\n     /* const symptoms = this.symptomsByAnimalType[animalType.toLowerCase()];\r\n      console.log(\"Symptom before dropdown: \",symptoms);\r\n      // Create a dropdown message\r\n      const dropdownMessage = this.createChatBotMessage(\r\n        \"Select a symptom:\",\r\n        {\r\n          widget: \"SymptomsDropdown\",\r\n          options: symptoms.map(symptom => ({ value: symptom, label: symptom }))\r\n        }\r\n      );\r\n      this.updateChatbotState(dropdownMessage);*/\r\n      const symptoms = this.symptomsByAnimalType[animalType.toLowerCase()];\r\n  console.log(\"Symptom before dropdown: \", symptoms);\r\n  // Create a dropdown message\r\n  const dropdownMessage = this.createChatBotMessage(\r\n    \"Select a symptom:\",\r\n    {\r\n      widget: \"SymptomsDropdown\",\r\n      props: { symptoms } // Pass symptoms as a separate prop\r\n    }\r\n  );\r\n  this.updateChatbotState(dropdownMessage);\r\n      \r\n    };\r\n    handleSelectedSymptom = (symptom) =>{\r\n      const message = this.createChatBotMessage(`You have selected the following symptom: ${symptom}`);\r\n    this.updateChatbotState(message);\r\n    }\r\n    \r\n  }\r\nexport default ActionProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}