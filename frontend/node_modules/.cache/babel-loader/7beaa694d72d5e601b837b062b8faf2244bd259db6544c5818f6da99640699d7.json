{"ast":null,"code":"class ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.handleInvalidMessage = context => {\n      const defaultMsg = 'Incorrect input. Please try again.';\n      const messageText = context ? `Please enter a valid ${context}.` : defaultMsg;\n      const message = this.createChatBotMessage(messageText);\n      this.updateChatbotState(message);\n    };\n    this.greetUser = () => {\n      const greetingMessage = this.createChatBotMessage(\"Hello.\");\n      this.updateChatbotState(greetingMessage);\n    };\n    this.handleAnimalCategory = category => {\n      // Define valid categories\n      const validCategories = [\"pets\", \"livestock\", \"poultry\"];\n\n      // Check if the entered category is valid\n      if (validCategories.includes(category.toLowerCase())) {\n        if (category.toLowerCase() === \"pets\") {\n          const message = this.createChatBotMessage(\"Please enter your pet type (Dog, Cat, Parrot):\");\n          this.updateChatbotState(message);\n          this.setState(state => ({\n            ...state,\n            nextInputAction: this.handlePetType\n          }));\n        } else if (category.toLowerCase() === \"livestock\") {\n          // Handle other categories similarly\n          const message = this.createChatBotMessage(\"Please enter your livestock type (Cow, Buffalo, Sheep, Goat):\");\n          this.updateChatbotState(message);\n          this.setState(state => ({\n            ...state,\n            nextInputAction: this.handleLiveStockType\n          }));\n        } else if (category.toLowerCase() === \"poultry\") {\n          const message = this.createChatBotMessage(\"Please enter your poultry type (Chicken):\");\n          this.updateChatbotState(message);\n          this.setState(state => ({\n            ...state,\n            nextInputAction: this.handlePoultryType\n          }));\n        }\n      } else {\n        const message = this.createChatBotMessage(\"Please enter a valid category (Pets, Livestock, or Poultry).\");\n        this.updateChatbotState(message);\n      }\n    };\n    this.handlePetType = petType => {\n      const validPets = [\"dog\", \"cat\", \"parrot\"];\n      if (validPets.includes(petType.toLowerCase())) {\n        const message = this.createChatBotMessage(\"Please enter your pet's symptoms:\");\n        this.updateChatbotState(message);\n        // Set the next expected input action to collect symptoms\n        this.setState(state => ({\n          ...state,\n          nextInputAction: this.handleSymptoms\n        }));\n      } else {\n        /*const message = this.createChatBotMessage(\"Please enter a valid pet (Dog, Cat, Parrot).\");\r\n        this.updateChatbotState(message);*/\n        this.handleInvalidMessage(\"pet (Dog, Cat, Parrot)\");\n      }\n    };\n    this.handleLiveStockType = livestocktype => {\n      const validLivestock = [\"cow\", \"buffalo\", \"sheep\", \"goat\"];\n      if (validLivestock.includes(livestocktype.toLowerCase())) {\n        const message = this.createChatBotMessage(\"Please enter your livestock's symptoms:\");\n        this.updateChatbotState(message);\n        // Set the next expected input action to collect symptoms\n        this.setState(state => ({\n          ...state,\n          nextInputAction: this.handleSymptoms\n        }));\n      } else {\n        /* const message = this.createChatBotMessage(\"Please enter a valid livestock (Cow, Buffalo, Sheep, Goat).\");\r\n         this.updateChatbotState(message);*/\n        this.handleInvalidMessage(\"livestock (Cow, Buffalo, Sheep, Goat)\");\n      }\n    };\n    this.handlePoultryType = poultrytype => {\n      const validpoultry = [\"chicken\"];\n      if (validpoultry.includes(poultrytype.toLowerCase())) {\n        const message = this.createChatBotMessage(\"Please enter your poultry's symptoms:\");\n        this.updateChatbotState(message);\n        // Set the next expected input action to collect symptoms\n        this.setState(state => ({\n          ...state,\n          nextInputAction: this.handleSymptoms\n        }));\n      } else {\n        this.handleInvalidMessage(\"poultry (Chicken)\");\n      }\n    };\n    this.handleSymptoms = () => {\n      const message = this.createChatBotMessage(\"Please select your animal's symptoms from the list:\", {\n        widget: \"SymptomsDropdown\"\n      });\n      this.updateChatbotState(message);\n    };\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n  updateChatbotState(message) {\n    this.setState(prevState => ({\n      ...prevState,\n      messages: [...prevState.messages, message]\n    }));\n  }\n}\nexport default ActionProvider;","map":{"version":3,"names":["ActionProvider","constructor","createChatBotMessage","setStateFunc","handleInvalidMessage","context","defaultMsg","messageText","message","updateChatbotState","greetUser","greetingMessage","handleAnimalCategory","category","validCategories","includes","toLowerCase","setState","state","nextInputAction","handlePetType","handleLiveStockType","handlePoultryType","petType","validPets","handleSymptoms","livestocktype","validLivestock","poultrytype","validpoultry","widget","prevState","messages"],"sources":["D:/Uni/office/project/frontend/src/chatbot/ActionProvider.js"],"sourcesContent":["\r\n\r\nclass ActionProvider {\r\n    constructor(createChatBotMessage, setStateFunc) {\r\n      this.createChatBotMessage = createChatBotMessage;\r\n      this.setState = setStateFunc;\r\n    }\r\n    handleInvalidMessage = (context) => {\r\n        const defaultMsg = 'Incorrect input. Please try again.';\r\n        const messageText = context ? `Please enter a valid ${context}.` : defaultMsg;\r\n        const message = this.createChatBotMessage(messageText);\r\n        this.updateChatbotState(message);\r\n    }\r\n    \r\n    greetUser = () => {\r\n      const greetingMessage = this.createChatBotMessage(\"Hello.\");\r\n      this.updateChatbotState(greetingMessage);\r\n    }\r\n    handleAnimalCategory = (category) => {\r\n      // Define valid categories\r\n      const validCategories = [\"pets\", \"livestock\", \"poultry\"];\r\n  \r\n      // Check if the entered category is valid\r\n      if (validCategories.includes(category.toLowerCase())) {\r\n        if (category.toLowerCase() === \"pets\") {\r\n            const message = this.createChatBotMessage(\"Please enter your pet type (Dog, Cat, Parrot):\");\r\n            this.updateChatbotState(message);\r\n            this.setState(state => ({ ...state, nextInputAction: this.handlePetType }));\r\n          } else if(category.toLowerCase() === \"livestock\") {\r\n            // Handle other categories similarly\r\n            const message = this.createChatBotMessage(\"Please enter your livestock type (Cow, Buffalo, Sheep, Goat):\");\r\n            this.updateChatbotState(message);\r\n            this.setState(state => ({ ...state, nextInputAction: this.handleLiveStockType }));\r\n            \r\n          }\r\n          else if(category.toLowerCase() === \"poultry\"){\r\n            const message = this.createChatBotMessage(\"Please enter your poultry type (Chicken):\");\r\n            this.updateChatbotState(message);\r\n            this.setState(state => ({ ...state, nextInputAction: this.handlePoultryType }));\r\n          }\r\n        } else {\r\n          const message = this.createChatBotMessage(\"Please enter a valid category (Pets, Livestock, or Poultry).\");\r\n          this.updateChatbotState(message);\r\n        }\r\n    };\r\n  \r\n    \r\n\r\n    handlePetType = (petType) => {\r\n        const validPets = [\"dog\", \"cat\", \"parrot\"];\r\n        if (validPets.includes(petType.toLowerCase())) {\r\n          const message = this.createChatBotMessage(\"Please enter your pet's symptoms:\");\r\n          this.updateChatbotState(message);\r\n          // Set the next expected input action to collect symptoms\r\n          this.setState(state => ({ ...state, nextInputAction: this.handleSymptoms }));\r\n        } else {\r\n          /*const message = this.createChatBotMessage(\"Please enter a valid pet (Dog, Cat, Parrot).\");\r\n          this.updateChatbotState(message);*/\r\n          this.handleInvalidMessage(\"pet (Dog, Cat, Parrot)\");\r\n        }\r\n      };\r\n    handleLiveStockType = (livestocktype) => {\r\n        const validLivestock = [\"cow\", \"buffalo\", \"sheep\", \"goat\"];\r\n        if (validLivestock.includes(livestocktype.toLowerCase())) {\r\n          const message = this.createChatBotMessage(\"Please enter your livestock's symptoms:\");\r\n          this.updateChatbotState(message);\r\n          // Set the next expected input action to collect symptoms\r\n          this.setState(state => ({ ...state, nextInputAction: this.handleSymptoms }));\r\n        } else {\r\n         /* const message = this.createChatBotMessage(\"Please enter a valid livestock (Cow, Buffalo, Sheep, Goat).\");\r\n          this.updateChatbotState(message);*/\r\n          this.handleInvalidMessage(\"livestock (Cow, Buffalo, Sheep, Goat)\");\r\n        }\r\n    }\r\n    handlePoultryType = (poultrytype) => {\r\n        const validpoultry =[\"chicken\"];\r\n        if (validpoultry.includes(poultrytype.toLowerCase())) {\r\n            const message = this.createChatBotMessage(\"Please enter your poultry's symptoms:\");\r\n            this.updateChatbotState(message);\r\n            // Set the next expected input action to collect symptoms\r\n            this.setState(state => ({ ...state, nextInputAction: this.handleSymptoms }));\r\n          } else {\r\n           \r\n            this.handleInvalidMessage(\"poultry (Chicken)\");\r\n          }\r\n    }\r\n\r\n    updateChatbotState(message) {\r\n      this.setState(prevState => ({\r\n        ...prevState,\r\n        messages: [...prevState.messages, message]\r\n      }));\r\n    }\r\n\r\n    handleSymptoms = () => {\r\n      const message = this.createChatBotMessage(\"Please select your animal's symptoms from the list:\", {\r\n          widget: \"SymptomsDropdown\"\r\n      });\r\n      this.updateChatbotState(message);\r\n    };\r\n    \r\n  }\r\nexport default ActionProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}